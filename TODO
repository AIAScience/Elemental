Functionality
=============
- Consistently implement 'GetDiagonal' functionality for DistMatrix
- Ability to change default grid with command-line options
- Quadratic-time Haar generation via random Householder reflectors
- Have matrix data zeroed by default? (to prevent NaN initialization bugs)
- 'PartitionTracker' class instead of Repartition/SlidePartition
- Way for DistMatrix with single process to view Matrix, and operator=
- (Generalized) Spectral Divide and Conquer
- More Sign algorithms
- Ostrowski matrices
- Power-method-like p-norm estimation
- Support for BLIS and fused Trmv's to accelerate HermitianEig
- Transpose option for LeastSquares
- QL factorization
- Strong RRQR and RRLQ 
- CUR decompositions (already have (pseudo-)skeleton)
- Complete Orthogonal Decompositions (especially URV)
- LU with rook pivoting
- Square process grid specialization of LDL (used to exist...)
- Pivoted Cholesky and LDL (Bunch-Kaufman and Bunch-Parlett)
- (Blocked) Aasen's
- TSQR
- TSLU (via tournament pivoting)
- Lower version of reduction to bidiagonal form
- Reduction to Hessenberg form
- Nonsymmetric (generalized) eigensolver via QR algorithm
- Visualization similar to EigTool or Higham's Matrix Computation Toolbox
- Wrappers for more LAPACK eigensolvers
- Sequential versions of Trr2k 
- More explicit expansions of packed Householder reflectors
- More Trtrmm/Trtrsm routines
- Compressed pseudoinverse solves which avoid unnecessary backtransformations
- Means of easily tracking/plotting heap memory usage over time
- Provide way to zoom in/out and add colorbar to DisplayWidget
- Better organization of test matrices into relevant classes, e.g., Hermitian,
  normal, triangular, Hessenberg, etc., so that each test driver can easily
  test each member from that class.

Maintenance
===========
- Document move semantics for (Dist)Matrix
- Document Int
- Update SWIG interface to allow for Int != int
- Convert 'AlignWith' routines to be requirements rather than actions, similar
  to 'ResizeTo', which simplifies error-handling by allowing it to be 
  centralized within the method rather than in every usage.
- Documentation for detailed interfaces which reside in sub-namespaces
- Update elemvariables to support usage of Qt5
- Many more references
- Update documentation for special matrices
- Update documentation for imported routines (and in general)
- References for Interpolative and Skeleton Decomposition 
- Document UnitaryCoherence (and see if simpler implementation possible)
- Separate out local blas-like and lapack-like operations
- Consistent handling of unblocked routines
- Use C++11's std::complex, extern templates, and perhaps std::thread
