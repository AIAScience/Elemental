Each of the following categories lists goals in an order which roughly 
corresponds to the order in which they are hoped to be added.
Items are marked using the following code:
  [x] ~ planned to be finished before the next release (0.82)
  [o] ~ hopefully started in the near future 
  [-] ~ marked for eventual development

Functionality priorities
========================

Fundamental functionality additions
-----------------------------------
[o] QR with full pivoting (Businger-Golub plus row-sorting or row-pivoting)
[o] Rank-one modifications of QR
[o] Rank-one modifications of Cholesky
[o] Finishing prototype generalized Spectral Divide and Conquer
[-] Windowed QR with column pivoting
[-] Power-method-like p-norm estimation
[-] QL factorization
[-] Strong RRQR and RRLQ 
[-] CUR decompositions (already have (pseudo-)skeleton)
[-] Complete Orthogonal Decompositions (especially URV)
[-] LU and LDL with rook pivoting
[-] (Blocked) Aasen's
[-] TSQR for non-powers-of-two
[-] TSLU (via tournament pivoting)
[-] Successive Band Reduction
[-] Reduction to Hessenberg form
[-] Nonsymmetric (generalized) eigensolver via QR/QZ algorithm
[-] Axpy interface implementation using one-sided communication
[-] Generalized Sylvester equations

Incremental functionality improvements
--------------------------------------
[x] Lanczos-based pseudospectrum computation
[o] Relative interval subset computation for HermitianEig (i.e., in [-1,1])
[o] Sequential blocked reduction to tridiagonal form
[o] Use pivot image rather than LAPACK-style so that Bunch-Kaufman C can be used
[o] Quadratic-time Haar generation via random Householder reflectors
[-] 'Control' equivalents to 'Attach' for DistMatrix, and ability to forfeit
    buffers in (Dist)Matrix
[-] Square process grid specializations of LDL and Bunch-Kaufman
[-] Businger-esque element-growth monitoring in GEPP and Bunch-Kaufman
[-] More Sign algorithms (switch to Newton-Schulz near convergence)
[-] Distribute between different grids for any distribution
[-] Way for DistMatrix with single process to view Matrix, and operator=
[-] Ostrowski matrices
[-] Transpose option for LeastSquares
[-] Lower version of reduction to bidiagonal form
[-] Various approaches (e.g., HJS) for parallel tridiagonalization
[-] Wrappers for more LAPACK eigensolvers
[-] Sequential versions of Trr2k 
[-] More explicit expansions of packed Householder reflectors
[-] More Trtrmm/Trtrsm routines
[-] Compressed pseudoinverse solves which avoid unnecessary backtransformations
[-] Additional CIRC distributions, e.g., (MC,CIRC)

Performance priorities
======================
[o] Accelerator support for local Gemm calls
[o] Support for BLIS and fused Trmv's to accelerate HermitianEig
[-] Optimized version of ApplySymmetricPivots
[-] Exploit structure in matrix sign based control solvers

Maintenance priorities
======================

Bug avoidance
-------------
[o] More error checks in (Dist)Matrix, e.g., in GetLocal and (Locked)Buffer
[-] Have matrix data zeroed by default? (to prevent NaN initialization bugs)
[-] Investigate (potential) minor memory leak in schur::SDC
[-] Investigate (potential) occasional invalid reads in PMR_process_r_queue

Instrumentation/visualization/testing
-------------------------------------
[-] Means of easily tracking/plotting heap memory usage over time
[-] Provide way to zoom in/out and add colorbar to DisplayWidget
[-] Better organization of test matrices into relevant classes, e.g., Hermitian,
    normal, triangular, Hessenberg, etc., so that each test driver can easily
    test each member from that class.

Consistency
-----------
[-] Consistently implement 'GetDiagonal' functionality for DistMatrix
[-] Make transpose-options of LocalTrr(2)k more consistent with Trr(2)k
[-] Convert 'AlignWith' routines to be requirements rather than actions, similar
    to 'ResizeTo', which simplifies error-handling by allowing it to be 
    centralized within the method rather than in every usage.
[-] Consistent implementation of unblocked routines
[-] Separate out local blas-like and lapack-like operations
[-] Safe down-casting of integers in BLAS/LAPACK calls

Documentation
-------------
[o] Finish adding per-directory README's (e.g., swig/ and cmake/toolchains/)

Build system
------------
[o] Support for OpenBLAS [-D MATH_LIBS="-lopenblas;-lpthread;-lm;-lgfortran"]
[o] Support for BLIS
[o] Support for automatically downloading and building netlib BLAS and LAPACK
[o] Speed up build with C++11's extern templates

Python interface
----------------
[o] Update SWIG interface to support routines added since 0.81
[o] Update SWIG interface to allow for Int != int

MPI and Threading
-----------------
[-] Implement message-splitting in collectives for count > 2^31
[-] Use MPI contiguous datatype for all messages with count > 2^31 
    (may not work with older MPIs)
[-] Detect oversubsription using sysconf/sysctl and {OMP,MKL,*}_NUM_THREADS
[-] Add MPI wrappers for all nonblocking collectives
[-] Add MPI wrappers for RMA
